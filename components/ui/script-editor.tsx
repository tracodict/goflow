/**
 * Script Editor Component
 * 
 * Monaco-based code editor for user scripts with syntax highlighting,
 * auto-completion, and validation.
 */

import React, { useState, useRef, useEffect, useCallback } from 'react'
import dynamic from 'next/dynamic'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { AlertCircle, CheckCircle2, Play, Save, X } from 'lucide-react'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'

import { globalSandbox } from '@/lib/script-sandbox'
import { ExampleScripts, createMockEventContext } from '@/lib/sandbox-examples'
import type { ScriptExecutionResult, EventHandlerContext } from '@/lib/component-interface'

// Dynamically import Monaco to avoid SSR issues
const MonacoEditor = dynamic(() => import('@monaco-editor/react'), {
  ssr: false,
  loading: () => (
    <div className="h-[300px] bg-muted animate-pulse rounded border flex items-center justify-center">
      Loading editor...
    </div>
  )
})

export interface ScriptEditorProps {\n  /** Current script code */\n  value?: string\n  /** Called when script code changes */\n  onChange?: (code: string) => void\n  /** Component type for context */\n  componentType?: string\n  /** Available events for this component */\n  availableEvents?: Array<{ name: string, description: string }>\n  /** Selected event name */\n  selectedEvent?: string\n  /** Called when event selection changes */\n  onEventChange?: (eventName: string) => void\n  /** Called when script is saved */\n  onSave?: (code: string) => void\n  /** Called when editor is cancelled/closed */\n  onCancel?: () => void\n  /** Whether editor is in read-only mode */\n  readOnly?: boolean\n  /** Height of the editor */\n  height?: number\n}\n\ninterface ValidationResult {\n  valid: boolean\n  error?: string\n}\n\ninterface TestResult {\n  success: boolean\n  error?: string\n  logs?: Array<{ level: string, message: string, timestamp: number }>\n  executionTime?: number\n}\n\nexport function ScriptEditor({\n  value = '',\n  onChange,\n  componentType = 'button',\n  availableEvents = [],\n  selectedEvent,\n  onEventChange,\n  onSave,\n  onCancel,\n  readOnly = false,\n  height = 300\n}: ScriptEditorProps) {\n  const [currentCode, setCurrentCode] = useState(value)\n  const [validation, setValidation] = useState<ValidationResult>({ valid: true })\n  const [testResult, setTestResult] = useState<TestResult | null>(null)\n  const [isTestingScript, setIsTestingScript] = useState(false)\n  const [selectedTemplate, setSelectedTemplate] = useState<string>('')\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false)\n  const editorRef = useRef<any>(null)\n\n  // Update internal state when external value changes\n  useEffect(() => {\n    setCurrentCode(value)\n    setHasUnsavedChanges(false)\n  }, [value])\n\n  // Validate script when code changes\n  useEffect(() => {\n    const validateAsync = async () => {\n      if (!currentCode.trim()) {\n        setValidation({ valid: true })\n        return\n      }\n\n      const result = globalSandbox.validateScript(currentCode)\n      setValidation(result)\n    }\n\n    const timeoutId = setTimeout(validateAsync, 500) // Debounce validation\n    return () => clearTimeout(timeoutId)\n  }, [currentCode])\n\n  // Handle code changes\n  const handleCodeChange = useCallback((newCode: string | undefined) => {\n    const code = newCode || ''\n    setCurrentCode(code)\n    setHasUnsavedChanges(code !== value)\n    onChange?.(code)\n  }, [value, onChange])\n\n  // Handle Monaco editor mount\n  const handleEditorDidMount = useCallback((editor: any, monaco: any) => {\n    editorRef.current = editor\n\n    // Configure TypeScript/JavaScript settings\n    monaco.languages.typescript.javascriptDefaults.setCompilerOptions({\n      target: monaco.languages.typescript.ScriptTarget.ES2020,\n      allowNonTsExtensions: true,\n      moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n      module: monaco.languages.typescript.ModuleKind.CommonJS,\n      noEmit: true,\n      esModuleInterop: true,\n      jsx: monaco.languages.typescript.JsxEmit.React,\n      allowJs: true,\n      typeRoots: ['node_modules/@types']\n    })\n\n    // Add custom type definitions for sandbox APIs\n    const sandboxTypes = `\n      declare const component: {\n        id: string;\n        type: string;\n        getProps(): Record<string, any>;\n        setProps(props: Record<string, any>): void;\n        emit(event: string, payload: any): void;\n        callAction(actionName: string, parameters: any): Promise<any>;\n      };\n      \n      declare const data: {\n        query(queryId: string): Promise<any>;\n        mutate(mutation: { type: string, payload: any }): Promise<any>;\n        subscribe(callback: (data: any) => void): () => void;\n      };\n      \n      declare const page: {\n        navigate(path: string): void;\n        getState(): any;\n        setState(state: any): void;\n        dispatch(action: any): void;\n      };\n      \n      declare const app: {\n        getGlobalState(): any;\n        setGlobalState(state: any): void;\n        showNotification(message: string, type?: 'info' | 'success' | 'warning' | 'error'): void;\n        callWorkflow(workflowId: string, payload: any): Promise<any>;\n      };\n      \n      declare function createAction(type: string, payload?: any): { type: string, payload: any, timestamp: number, id: string };\n      declare function log(message: string, level?: 'debug' | 'info' | 'warn' | 'error'): void;\n      declare function now(): number;\n      declare const eventPayload: any;\n      declare let result: { componentUpdates?: any, actions?: any[] };\n    `\n\n    monaco.languages.typescript.javascriptDefaults.addExtraLib(\n      sandboxTypes,\n      'sandbox-types.d.ts'\n    )\n\n    // Add keyboard shortcuts\n    editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, () => {\n      handleSave()\n    })\n\n    editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter, () => {\n      handleTestScript()\n    })\n  }, [])\n\n  // Load template script\n  const loadTemplate = useCallback((templateName: string) => {\n    if (templateName && ExampleScripts[templateName as keyof typeof ExampleScripts]) {\n      const templateCode = ExampleScripts[templateName as keyof typeof ExampleScripts]\n      setCurrentCode(templateCode)\n      setHasUnsavedChanges(true)\n      onChange?.(templateCode)\n    }\n  }, [onChange])\n\n  // Test script execution\n  const handleTestScript = useCallback(async () => {\n    if (!currentCode.trim()) {\n      setTestResult({ success: false, error: 'No script to test' })\n      return\n    }\n\n    setIsTestingScript(true)\n    setTestResult(null)\n\n    try {\n      const mockContext = createMockEventContext()\n      const mockPayload = {\n        timestamp: Date.now(),\n        componentId: 'test-component',\n        eventType: selectedEvent || 'click'\n      }\n\n      const startTime = Date.now()\n      const result = await globalSandbox.executeScript(\n        'test-script',\n        currentCode,\n        mockContext,\n        mockPayload\n      )\n      const executionTime = Date.now() - startTime\n\n      setTestResult({\n        success: result.success,\n        error: result.error,\n        logs: result.logs,\n        executionTime\n      })\n    } catch (error) {\n      setTestResult({\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      })\n    } finally {\n      setIsTestingScript(false)\n    }\n  }, [currentCode, selectedEvent])\n\n  // Save script\n  const handleSave = useCallback(() => {\n    if (validation.valid) {\n      onSave?.(currentCode)\n      setHasUnsavedChanges(false)\n    }\n  }, [currentCode, validation.valid, onSave])\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Script Editor</span>\n          <div className=\"flex items-center gap-2\">\n            {hasUnsavedChanges && (\n              <Badge variant=\"secondary\">Unsaved changes</Badge>\n            )}\n            {validation.valid ? (\n              <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                <CheckCircle2 className=\"h-3 w-3 mr-1\" />\n                Valid\n              </Badge>\n            ) : (\n              <Badge variant=\"destructive\">\n                <AlertCircle className=\"h-3 w-3 mr-1\" />\n                Invalid\n              </Badge>\n            )}\n          </div>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Event Selection and Templates */}\n        <div className=\"flex gap-4\">\n          {availableEvents.length > 0 && (\n            <div className=\"flex-1\">\n              <label className=\"text-sm font-medium mb-1 block\">Event</label>\n              <Select value={selectedEvent} onValueChange={onEventChange}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select event\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableEvents.map(event => (\n                    <SelectItem key={event.name} value={event.name}>\n                      <div>\n                        <div className=\"font-medium\">{event.name}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {event.description}\n                        </div>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n          \n          <div className=\"flex-1\">\n            <label className=\"text-sm font-medium mb-1 block\">Template</label>\n            <Select value={selectedTemplate} onValueChange={setSelectedTemplate}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose template\" />\n              </SelectTrigger>\n              <SelectContent>\n                {Object.keys(ExampleScripts).map(templateName => (\n                  <SelectItem key={templateName} value={templateName}>\n                    {templateName.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {selectedTemplate && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => loadTemplate(selectedTemplate)}\n              className=\"self-end\"\n            >\n              Load Template\n            </Button>\n          )}\n        </div>\n\n        {/* Monaco Editor */}\n        <div className=\"border rounded\">\n          <MonacoEditor\n            height={height}\n            language=\"javascript\"\n            theme=\"vs-dark\"\n            value={currentCode}\n            onChange={handleCodeChange}\n            onMount={handleEditorDidMount}\n            options={{\n              readOnly,\n              minimap: { enabled: false },\n              scrollBeyondLastLine: false,\n              wordWrap: 'on',\n              lineNumbers: 'on',\n              folding: true,\n              selectOnLineNumbers: true,\n              automaticLayout: true,\n              tabSize: 2,\n              insertSpaces: true,\n              formatOnPaste: true,\n              formatOnType: true,\n              suggest: {\n                showKeywords: true,\n                showSnippets: true,\n                showFunctions: true,\n                showVariables: true\n              }\n            }}\n          />\n        </div>\n\n        {/* Validation Error */}\n        {!validation.valid && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Syntax Error</AlertTitle>\n            <AlertDescription>{validation.error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Test Results */}\n        {testResult && (\n          <Alert variant={testResult.success ? \"default\" : \"destructive\"}>\n            <div className=\"flex items-start gap-2\">\n              {testResult.success ? (\n                <CheckCircle2 className=\"h-4 w-4 mt-0.5\" />\n              ) : (\n                <AlertCircle className=\"h-4 w-4 mt-0.5\" />\n              )}\n              <div className=\"flex-1\">\n                <AlertTitle>\n                  {testResult.success ? 'Test Passed' : 'Test Failed'}\n                  {testResult.executionTime && (\n                    <span className=\"text-xs font-normal ml-2\">\n                      ({testResult.executionTime}ms)\n                    </span>\n                  )}\n                </AlertTitle>\n                {testResult.error && (\n                  <AlertDescription>{testResult.error}</AlertDescription>\n                )}\n                {testResult.logs && testResult.logs.length > 0 && (\n                  <div className=\"mt-2\">\n                    <div className=\"text-sm font-medium mb-1\">Script Output:</div>\n                    <div className=\"bg-muted p-2 rounded text-xs font-mono\">\n                      {testResult.logs.map((log, index) => (\n                        <div key={index} className=\"mb-1\">\n                          <span className=\"text-muted-foreground\">[{log.level}]</span>\n                          <span className=\"ml-2\">{log.message}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </Alert>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-between\">\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleTestScript}\n              disabled={!validation.valid || isTestingScript || !currentCode.trim()}\n            >\n              <Play className=\"h-4 w-4 mr-1\" />\n              {isTestingScript ? 'Testing...' : 'Test Script'}\n            </Button>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            {onCancel && (\n              <Button variant=\"outline\" size=\"sm\" onClick={onCancel}>\n                <X className=\"h-4 w-4 mr-1\" />\n                Cancel\n              </Button>\n            )}\n            <Button\n              size=\"sm\"\n              onClick={handleSave}\n              disabled={!validation.valid || !hasUnsavedChanges}\n            >\n              <Save className=\"h-4 w-4 mr-1\" />\n              Save\n            </Button>\n          </div>\n        </div>\n\n        {/* Quick Help */}\n        <div className=\"text-xs text-muted-foreground space-y-1\">\n          <div>Keyboard shortcuts:</div>\n          <div>• Ctrl+S (Cmd+S): Save script</div>\n          <div>• Ctrl+Enter (Cmd+Enter): Test script</div>\n          <div>• Available objects: component, data, page, app, eventPayload</div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}