diff --git a/components/petri/cron-lite.tsx b/components/petri/cron-lite.tsx
index 26ad945..d84a8bd 100644
--- a/components/petri/cron-lite.tsx
+++ b/components/petri/cron-lite.tsx
@@ -1,9 +1,9 @@
 "use client"
 
-import { useEffect, useMemo, useState } from "react"
-import { Label } from "@/components/ui/label"
+import { useEffect } from "react"
 import { Button } from "@/components/ui/button"
 import { cn } from "@/lib/utils"
+import Cron from 'react-cron-generator'
 
 type CronError = { description: string } | null
 
@@ -11,191 +11,63 @@ type Props = {
   value?: string
   setValue: (v: string) => void
   onError?: (err: CronError) => void
-  humanizeLabels?: boolean
-  humanizeValue?: boolean
-  leadingZero?: boolean
   clearButton?: boolean
   className?: string
 }
 
 /**
  * CronLite
- * Minimal, dependency-free cron(5) editor.
- * Supports "*" wildcard or single numeric values for each field.
+ * A wrapper around react-cron-generator for cron expression editing.
  */
 export function CronLite({
   value,
   setValue,
   onError,
-  humanizeLabels = true,
-  humanizeValue = true,
-  leadingZero = false,
   clearButton = true,
   className,
 }: Props) {
-  const [minute, setMinute] = useState<string>("*")
-  const [hour, setHour] = useState<string>("*")
-  const [dom, setDom] = useState<string>("*")
-  const [month, setMonth] = useState<string>("*")
-  const [dow, setDow] = useState<string>("*")
-
-  const pad = (n: number) => (leadingZero ? String(n).padStart(2, "0") : String(n))
-
-  const minutes = useMemo(() => ["*", ...Array.from({ length: 60 }, (_, i) => pad(i))], [leadingZero])
-  const hours = useMemo(() => ["*", ...Array.from({ length: 24 }, (_, i) => pad(i))], [leadingZero])
-  const doms = ["*", ...Array.from({ length: 31 }, (_, i) => String(i + 1))]
-  const months = ["*", ...Array.from({ length: 12 }, (_, i) => String(i + 1))]
-  const dows = ["*", "0", "1", "2", "3", "4", "5", "6"]
-
-  const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
-  const dowNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
-
-  // Parse incoming value
   useEffect(() => {
     if (!value) {
       onError?.(null)
       return
     }
     const parts = value.trim().split(/\s+/)
-    if (parts.length !== 5) {
-      onError?.({ description: "Cron must have 5 fields: m h dom mon dow" })
-      return
-    }
-    const [m, h, d, mo, dw] = parts
-    const valid =
-      isValidField(m, minutes) &&
-      isValidField(h, hours) &&
-      isValidField(d, doms) &&
-      isValidField(mo, months) &&
-      isValidField(dw, dows)
-    if (!valid) {
-      onError?.({ description: "Invalid cron field. Only '*' or single numeric values are supported." })
+    if (parts.length !== 7) {
+      onError?.({ description: "Cron must have 7 fields: s m h dom mon dow year" })
       return
     }
-    setMinute(m)
-    setHour(h)
-    setDom(d)
-    setMonth(mo)
-    setDow(dw)
     onError?.(null)
-    // eslint-disable-next-line react-hooks/exhaustive-deps
-  }, [value])
+  }, [value, onError])
 
-  // Build expression whenever fields change
-  useEffect(() => {
-    const expr = [minute, hour, dom, month, dow].join(" ")
-    setValue(expr)
-    const valid =
-      isValidField(minute, minutes) &&
-      isValidField(hour, hours) &&
-      isValidField(dom, doms) &&
-      isValidField(month, months) &&
-      isValidField(dow, dows)
-    onError?.(valid ? null : { description: "Invalid cron expression." })
-    // eslint-disable-next-line react-hooks/exhaustive-deps
-  }, [minute, hour, dom, month, dow])
+  const handleChange = (cronExpression: string) => {
+    setValue(cronExpression)
+    onError?.(null)
+  }
 
   const clear = () => {
-    setMinute("*")
-    setHour("*")
-    setDom("*")
-    setMonth("*")
-    setDow("*")
     setValue("")
     onError?.(null)
   }
 
   return (
     <div className={cn("grid gap-3", className)}>
-      <Field
-        label="Minute"
-        value={minute}
-        onChange={setMinute}
-        options={minutes}
-        tooltip={humanizeValue ? "0-59 or *" : undefined}
-      />
-      <Field
-        label="Hour"
-        value={hour}
-        onChange={setHour}
-        options={hours}
-        tooltip={humanizeValue ? "0-23 or *" : undefined}
-      />
-      <Field
-        label="Day of month"
-        value={dom}
-        onChange={setDom}
-        options={doms}
-        tooltip={humanizeValue ? "1-31 or *" : undefined}
-      />
-      <Field
-        label="Month"
-        value={month}
-        onChange={setMonth}
-        options={months}
-        renderOption={(v) => (humanizeLabels && v !== "*" ? `${v} (${monthNames[Number(v) - 1]})` : v)}
-      />
-      <Field
-        label="Day of week"
-        value={dow}
-        onChange={setDow}
-        options={dows}
-        renderOption={(v) => (humanizeLabels && v !== "*" ? `${v} (${dowNames[Number(v)]})` : v)}
+      <Cron
+        value={value}
+        onChange={handleChange}
+        showResultText={true}
+        showResultCron={true}
       />
-
-      {clearButton ? (
+      {clearButton && (
         <div className="pt-1">
           <Button type="button" variant="outline" size="sm" onClick={clear}>
             Clear
           </Button>
         </div>
-      ) : null}
-    </div>
-  )
-}
-
-function isValidField(val: string, allowed: string[]) {
-  return allowed.includes(val)
-}
-
-function Field({
-  label,
-  value,
-  onChange,
-  options,
-  renderOption,
-  tooltip,
-}: {
-  label: string
-  value: string
-  onChange: (v: string) => void
-  options: string[]
-  renderOption?: (v: string) => string
-  tooltip?: string
-}) {
-  return (
-    <div className="grid gap-1.5">
-      <Label className="text-xs" title={tooltip}>
-        {label}
-      </Label>
-      <select
-        className="h-9 w-full rounded-md border border-neutral-300 bg-white px-2 text-sm"
-        value={value}
-        onChange={(e) => onChange(e.target.value)}
-      >
-        {options.map((opt) => (
-          <option key={opt} value={opt}>
-            {renderOption ? renderOption(opt) : opt}
-          </option>
-        ))}
-      </select>
+      )}
     </div>
   )
 }
 
 CronLite.defaultProps = {
-  humanizeLabels: true,
-  humanizeValue: true,
-  leadingZero: false,
   clearButton: true,
 }
diff --git a/components/petri/floating-codemirror.tsx b/components/petri/floating-codemirror.tsx
index 8a2e3a7..6f21a8d 100644
--- a/components/petri/floating-codemirror.tsx
+++ b/components/petri/floating-codemirror.tsx
@@ -5,7 +5,7 @@ import { useEffect, useLayoutEffect, useMemo, useRef, useState } from "react"
 import { createPortal } from "react-dom"
 import CodeMirror from "@uiw/react-codemirror"
 import { json } from "@codemirror/lang-json"
-import { shell } from "@codemirror/lang-shell"
+import { javascript } from "@codemirror/lang-javascript"
 import { EditorView } from "@codemirror/view"
 import type { Extension } from "@codemirror/state"
 
@@ -13,7 +13,7 @@ type FloatingCodeMirrorProps = {
   anchorRef: React.RefObject<HTMLElement | null>
   scrollParents?: Array<HTMLElement | Window>
   height: number
-  language: "json" | "shell" | "text"
+  language: "json" | "javascript" | "text"
   value: string
   onChange?: (val: string) => void
   className?: string
@@ -133,8 +133,8 @@ export function FloatingCodeMirror({
     switch (language) {
       case "json":
         return [...base, json()]
-      case "shell":
-        return [...base, shell()]
+      case "javascript":
+        return [...base, javascript()]
       default:
         return base
     }
diff --git a/components/petri/side-panel.tsx b/components/petri/side-panel.tsx
index 9e6409d..5264c0a 100644
--- a/components/petri/side-panel.tsx
+++ b/components/petri/side-panel.tsx
@@ -310,11 +310,7 @@ function TokenEditor({
           <Trash2 className="mr-1 h-4 w-4" /> Remove
         </Button>
       </div>
-      <div className="grid grid-cols-2 gap-3">
-        <div className="grid gap-1">
-          <Label className="text-xs">Created</Label>
-          <Input value={new Date(token.createdAt).toLocaleString()} readOnly />
-        </div>
+      <div className="grid grid-cols-1 gap-1">
         {token.updatedAt ? (
           <div className="grid gap-1">
             <Label className="text-xs">Updated</Label>
@@ -380,7 +376,7 @@ function TransitionEditor({
           anchorRef={anchorRef}
           scrollParents={[window, ...(scrollContainerRef.current ? [scrollContainerRef.current] : [])]}
           height={160}
-          language="shell"
+          language="javascript"
           value={inscriptionText}
           onChange={(val) => setInscriptionText(val)}
           placeholder='if amount > 1000 then "review" else "auto"'
diff --git a/package.json b/package.json
index 9ce94c1..ed6dc3f 100644
--- a/package.json
+++ b/package.json
@@ -10,8 +10,8 @@
   },
   "dependencies": {
     "@babel/runtime": "latest",
+    "@codemirror/lang-javascript": "latest",
     "@codemirror/lang-json": "latest",
-    "@codemirror/lang-shell": "latest",
     "@codemirror/state": "latest",
     "@codemirror/theme-one-dark": "latest",
     "@codemirror/view": "latest",
@@ -58,6 +58,7 @@
     "next": "15.2.4",
     "next-themes": "latest",
     "react": "^19",
+    "react-cron-generator": "^2.0.20",
     "react-day-picker": "9.8.0",
     "react-dom": "^19",
     "react-hook-form": "^7.60.0",
@@ -79,4 +80,4 @@
     "tw-animate-css": "1.3.3",
     "typescript": "^5"
   }
-}
\ No newline at end of file
+}

